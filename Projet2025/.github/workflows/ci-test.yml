name: CI → Test

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  IMAGE: ghcr.io/${{ github.repository }}/projet2025:${{ github.sha }}

jobs:
  test:
    runs-on: self-hosted      # ton runner local
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps for tests
        run: |
          python -m pip install --upgrade pip
          pip install flask pytest
      - name: Run unit tests
        run: pytest -q

  build_and_push:
    runs-on: self-hosted
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        run: echo ${{ github.token }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build image
        run: docker build -t "$IMAGE" .
      - name: Push image
        run: docker push "$IMAGE"

  deploy_test:
    runs-on: self-hosted
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4
      - name: Ensure namespace + base resources
        run: |
          kubectl get ns test >/dev/null 2>&1 || kubectl create namespace test
          kubectl -n test apply -f k8s/test/service.yaml
          kubectl -n test apply -f k8s/test/ingress.yaml
          # créer le Deployment s'il n'existe pas encore (avec l'image courante)
          if ! kubectl -n test get deploy projet2025 >/dev/null 2>&1; then
            sed "s|__IMAGE__|${IMAGE}|g" k8s/test/deployment.yaml | kubectl -n test apply -f -
          fi
      - name: Rolling update to new image
        run: |
          kubectl -n test set image deployment/projet2025 projet2025=${IMAGE} --record
          kubectl -n test rollout status deployment/projet2025
