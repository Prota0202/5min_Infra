name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch: {}

env:
  IMAGE_SHA: docker.io/${{ secrets.DOCKER_USERNAME }}/projet2025:${{ github.sha }}
  IMAGE_MAIN: docker.io/${{ secrets.DOCKER_USERNAME }}/projet2025:main

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python pour les tests
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies (tests)
        run: |
          python -m pip install -U pip
          python -m pip install -r app/requirements.txt

      - name: Run unit tests
        run: pytest -q tests/

      # Build & Push Docker Hub (sha + main)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image (sha + main)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_SHA }}
            ${{ env.IMAGE_MAIN }}

      # Déploiement optionnel (nécessite un kubeconfig accessible)
      - name: Check KUBE_CONFIG
        id: checkkube
        run: |
          if [ -z "${{ secrets.KUBE_CONFIG }}" ]; then
            echo "HAS_KUBE=false" >> $GITHUB_ENV
            echo "ℹ️  KUBE_CONFIG absent : déploiement ignoré (OK si cluster local via CronJob auto-sync)."
          else
            echo "HAS_KUBE=true" >> $GITHUB_ENV
          fi

      - name: Set up kubeconfig
        if: env.HAS_KUBE == 'true'
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config current-context
          kubectl get nodes || true

      - name: Apply base resources (test)
        if: env.HAS_KUBE == 'true'
        run: |
          kubectl get ns test >/dev/null 2>&1 || kubectl create namespace test
          # Applique service/ingress si présents
          if [ -f k8s/test/service.yaml ]; then kubectl -n test apply -f k8s/test/service.yaml; fi
          if [ -f k8s/test/ingress.yaml ]; then kubectl -n test apply -f k8s/test/ingress.yaml; fi
          # Crée le Deployment s’il n’existe pas encore (remplace __IMAGE__)
          if [ -f k8s/test/deployment.yaml ] && ! kubectl -n test get deploy projet2025 >/dev/null 2>&1; then
            sed "s|__IMAGE__|${{ env.IMAGE_SHA }}|g" k8s/test/deployment.yaml | kubectl -n test apply -f -
          fi

      - name: Rollout to test
        if: env.HAS_KUBE == 'true'
        run: |
          kubectl -n test set image deployment/projet2025 projet2025="${{ env.IMAGE_SHA }}" --record
          kubectl -n test rollout status deployment/projet2025
          kubectl -n test get deploy projet2025 -o wide
